The Sequence Table
=======================================
The table consists of a series of five 16-bit values which each make up a "song". The first four values represent the starting point for each channel, while the fifth value represents a pointer to the "speed control" in a "step table".
The table's location is found with the following series of instructions:

    ld l, a			;A = song number?
    ld h, 0
    add hl, hl
    ld d, h
    ld e, l
    add hl, hl
    add hl, hl
    add hl, de			;Load pointers into RAM
    ld de, SeqTable

In hex values, this equates to:
6F 26 00 29 54 5D 29 29 19 11 ?? ??

The Instrument Table
=======================================
The table consists of a series of 16-bit values, the first 16 which are for channel 1-3 (pulse and wave), and the rest of which are for channel 4 (noise). The instrument table is found with the following series of instructions:
    srl a
    srl a
    srl a
    add d
    push hl
    ld hl, InsTable

In hex values, this equates to:
CB 3F CB 3F CB 3F 82 E5 21 ?? ??

Each instrument is 12 bytes:
1 = Looping or non-looping (Bit 1 must be set, if bit 2 is set, it does not loop)
2 = Duty?
3 = Maximum note time
4 = Volume envelope change
5-6 = Pointer 1 (to volume envelope pattern?)
7 = Enable/disable vibrato (0 or 1)
8-9 = Pointer 2 (to frequency change pattern?)
A = Sweep time (0 = disabled)
B-C = Pointer 3 (to "special effect" pattern)

Following the instrument data is a series of volume change/envelope patterns, and then vibrato/frequency change patterns and finally special FX parameter patterns, all of which are referenced by each instrument if either is used.
These can be any length. Envelope patterns always end with value FF, vibrato patterns always end with value 7E, and special effects values always end with value 4C.

Sequence Format
=======================================
Like Tiertex's sound engine, most of the notes are played through "macro" sequences of notes that are repeated with various parameters. These are played via the command 64, and are referenced from the macro table (see below).

Note format: 12 34
1-2 = Note value
3 = Instrument
4 = Note length

Note values appear to be the same as standard MIDI values, except 1 octave lower. To calculate the values, check each track's transpose from the 64 instructions. The value 24 is used for "silence" in some games along with instrument 0. Instrument 0 is also used for a rest.
Channel 3 and "special effect" notes use values 0x80 and higher. To convert those to standard MIDI values, subtract 0x80 (128) and then an octave down.

60 xy = Rest - takes same parameters as a note (only seems to be used in early games)
61 = Silence/pause channel
62xxxx = Go to macro "loop point"
63xx = Change noise channel type?
64xxyyzz = Call macro, controls frequency of track channel and number of times to repeat
	(Byte 1: Macro number, byte 2: amount to transpose frequency, byte 3: times to repeat track - signed value)
65 = End of macro
66xx = Set "has looped" flag, byte 2 always 01?
67xx = Set all panning
68xxxx = Set step table/speed table
69xx = Set song tempo
6Axx = Set channel 1 panning
6Bxx = Set channel 2 panning
6Cxx = Set channel 3 panning
6Dxx = Set channel 4 panning

The note lengths are mapped to each value of the current "step table". To convert these to real MIDI note length values, multiply each value by 5.


The Macro Table
=======================================
Like the sequence table, the macro table is comprised of 16-bit pointer values. The macro table can be found using one of two methods, depending on the game:

Old method (for games pre-1999):

pop hl
ld de, FFFE
add hl, de
ld a, $01
inc bc
ld a, [bc]
sla a
ld de, MacroTable

In hex, this code reads as follows:
E1 11 FE FF 19 3E 01 22 03 0A CB 27 11 ?? ??

New method (for games 1999-):
sla a
jr nc, (6 bytes)
ld de, MacroTable

In hex, this code reads as follows:
CB 27 30 06 11 ?? ?? 14 18 03

Sound Effects Table
=======================================
Another table comprised of 16-bit pointer values. The macro table can be found using the following method:

    ld hl, SFXTable
    sla a
    add l
    ld l, a

In hex, this code reads as follows:
21 ?? ?? CB 27 85 6F 30

Waveform
=======================================
There is only one waveform pattern per game which is only loaded when the driver is first initialized. (Since Woody Woodpecker and the cancelled Resident Evil play a sample before any other audio is heard, this overrides the wave channel with the last part of the sample and causes the wave channel to be completely silent throughout the game.)

This is found with the following instructions:

    ld de, WaveRAM				;$FF30
    ld hl, Waveform
    ld b, $10

In hex, this code reads as follows:
11 30 FF 21 ?? ?? 06 10

Dragon's Lair: The Legend, the first game to use the driver in its earliest iteration, doesn't initialize wave RAM and relies on the "default" values when the Game Boy is powered on. Since the Game Boy Color has different default values, channel 3 sounds different and higher-pitched on GBC systems and later.
Earlier games use the following wave pattern:
FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00

For later games, the waveform is as follows:
AA AA AA AA AA AA AA AA 00 00 00 00 00 00 00 00